{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Heading","react_default","a","createElement","className","TodoForm","_ref","newTodoFN","toggleAll","onClick","onSubmit","e","preventDefault","console","log","target","TodoFormTextBox","value","type","name","placeholder","required","TodoBox","_ref2","todo","completed","deleteTodo","todoId","toggleTodo","checked","onChange","style","textDecoration","color","TodoList","_ref3","todos","map","key","id","todoItem","Footer","_ref4","changeViewFilter","handleClick","length","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNewTodo","newTodo","concat","newTodoObj","state","nextId","newState","toConsumableArray","setState","newTodos","filter","objectSpread","allCompleted","every","viewFilter","_this$state","visibleTodos","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5888d10d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Heading() {return <h1 className=\"Heading\">todos</h1>}\n\nfunction TodoForm({newTodoFN, toggleAll}) {\n  \n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(e.target.TodoFormTextBox.value);\n    newTodoFN(e.target.TodoFormTextBox.value);\n    e.target.TodoFormTextBox.value = '';\n  }\n  \n  return (\n    <div className=\"TodoForm\">\n      <button className=\"Toggler\" onClick={toggleAll}>V</button>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" className=\"TodoFormTextBox\" name=\"TodoFormTextBox\" placeholder=\"What needs to be done?\" required />\n      </form>\n    </div>\n  );\n}\n\nfunction TodoBox({todo, completed, deleteTodo, todoId, toggleTodo}) {\n  const completeStyle = {textDecoration: 'line-through', color: 'grey'};\n  return (\n    <div className=\"TodoBox\">\n      <div className=\"CheckBox\">\n        <input \n          type=\"checkbox\" \n          checked={completed ? true : false} \n          onChange={e => toggleTodo(todoId)} \n        />\n      </div>\n      <p\n        style={completed ? completeStyle : null}\n      >{todo}</p>\n      <button className=\"Deleter\" onClick={e => deleteTodo(todoId)}>X</button>\n    </div>\n  );\n}\n\n\nfunction TodoList({todos, toggleTodo, deleteTodo}) {\n  const listOfTodos = (\n    todos.map(todo =>  (\n     <TodoBox\n       key={todo.id}\n       todoId={todo.id}\n       todo={todo.todoItem}\n       completed={todo.completed}\n       deleteTodo={deleteTodo} \n       toggleTodo={toggleTodo}\n     />\n    ))\n  );\n  return (\n    listOfTodos\n  );\n}\n\n\nfunction Footer({todos, changeViewFilter}) {\n  function handleClick(e) {\n    changeViewFilter(e.target.name);\n  }\n  \n  return (\n    <div className=\"Footer\">\n      <p>{todos.length} {todos.length === 1 ? 'todo' : 'total todos' }</p>\n      <button name=\"SHOW_ALL\" onClick={handleClick}>ALL</button>\n      <button name=\"SHOW_ACTIVE\" onClick={handleClick}>ACTIVE</button>\n      <button name=\"SHOW_COMPLETED\" onClick={handleClick}>COMPLETED</button>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewFilter: 'SHOW_ALL',\n      todos: [\n        {\n          id: 0,\n          todoItem: 'Buy biscuits',\n          completed: true\n        },\n        {\n          id: 1,\n          todoItem: 'Walk the dog',\n          completed: false\n        },\n        {\n          id: 2,\n          todoItem: 'Watch movie',\n          completed: false\n        },\n        {\n          id: 3,\n          todoItem: 'Practice web dev',\n          completed: true\n        },\n      ],\n      nextId: 4\n    };\n  }\n  \n  handleNewTodo = newTodo => {\n    console.log(`Added \"${newTodo}\" to the todo list!`);\n    const newTodoObj = {id: this.state.nextId, todoItem: newTodo, completed: false};\n    const todos = [...this.state.todos, newTodoObj];\n    const newNextId = this.state.nextId + 1;\n    const newState = {todos, nextId: newNextId};\n    this.setState(newState, () => console.log(this.state));\n  }\n  \n  deleteTodo = todoId => {\n    const newTodos = this.state.todos.filter(todo => todo.id !== todoId);\n    this.setState({todos: newTodos}, () => console.log('Deleted'));\n  }\n  \n  toggleTodo = todoId => {\n    const todos = this.state.todos.map(todo => \n      (todo.id === todoId)\n      ? {...todo, completed: !todo.completed}\n      : todo\n    )\n    this.setState({todos}, () => console.log('Toggled'));\n  }\n  \n  toggleAll = () => {\n    const allCompleted = this.state.todos.every(todo => todo.completed === true);\n    const todos = this.state.todos.map(todo =>\n       allCompleted \n         ? {...todo, completed: false} \n         : {...todo, completed: true}\n    )\n    this.setState({todos}, () => console.log('Toggled All'));\n  }\n  \n  changeViewFilter = viewFilter => {\n    this.setState({viewFilter});\n  }\n  \n  render() {\n    const {todos, viewFilter} = this.state;\n    function visibleTodos(todos, viewFilter) {\n      switch (viewFilter) {\n        case 'SHOW_ALL':\n          return todos;\n        case 'SHOW_COMPLETED':\n          return todos.filter(todo => todo.completed);\n        case 'SHOW_ACTIVE':\n          return todos.filter(todo => !todo.completed);\n      }\n    };\n    \n    return (\n      <div className=\"App\"> \n        <Heading />\n        <TodoForm newTodoFN={this.handleNewTodo} toggleAll={this.toggleAll} />   \n        <TodoList todos={visibleTodos(todos, viewFilter)} deleteTodo={this.deleteTodo} toggleTodo={this.toggleTodo} />\n        {this.state.todos.length !== 0 ? <Footer todos={todos} changeViewFilter={this.changeViewFilter} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}